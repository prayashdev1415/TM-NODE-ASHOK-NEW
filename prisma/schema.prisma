// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id        String   @id @default(cuid())
  name      String
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model companyRegistrationOTP {
  companyOtpId String   @id @default(cuid())
  companyEmail String
  otp          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("companyotps")
}

model forgetPwOTPStore {
  forgetPwId     String @id @default(cuid())
  companyEmail   String
  otp            String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("forgetpwotps")
}

model Department {
  departmentId   String           @id @default(cuid())
  departmentName String
  noOfTeams      Int?             @default(0)
  departmentHead String?
  company        Company          @relation(fields: [companyId], references: [companyId])
  companyId      String
  team           Team[]
  employee       Employee[]
  screenshot     Screenshot[]
  timeLapseVideo TimeLapseVideo[]
  riskUser       RiskUser[]
  attendance     Attendance[]
  leave          Leave[]
  holiday        Holiday[]
  app            App[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("departments")
}

model Team {
  teamId         String           @id @default(cuid())
  teamName       String
  departmentId   String
  department     Department       @relation(fields: [departmentId], references: [departmentId])
  companyId      String
  company        Company          @relation(fields: [companyId], references: [companyId])
  noOfEmployee   Int?             @default(0)
  teamHead       String?
  employee       Employee[]
  screenshot     Screenshot[]
  timeLapseVideo TimeLapseVideo[]
  attendance     Attendance[]
  leave          Leave[]
  holiday        Holiday[]
  app            App[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("teams")
}

model Screenshot {
  screenshotId String     @id @default(cuid())
  time         DateTime
  imageLink    String
  employeeId   String
  employee     Employee   @relation(fields: [employeeId], references: [employeeId])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [departmentId])
  teamId       String
  team         Team       @relation(fields: [teamId], references: [teamId])
  companyId    String
  company      Company    @relation(fields: [companyId], references: [companyId])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("screenshots")
}

model TimeLapseVideo {
  timeLapseVideoId String     @id @default(cuid())
  videoLink        String
  time             DateTime
  employeeId       String
  employee         Employee   @relation(fields: [employeeId], references: [employeeId])
  departmentId     String
  department       Department @relation(fields: [departmentId], references: [departmentId])
  teamId           String
  team             Team       @relation(fields: [teamId], references: [teamId])
  companyId        String
  company          Company    @relation(fields: [companyId], references: [companyId])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@map("timelapsevideos")
}

model RiskUser {
  riskUserId   String      @id @default(cuid())
  employeeId   String
  employeeName String
  employee     Employee    @relation(fields: [employeeId], references: [employeeId])
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [departmentId])
  companyId    String
  company      Company     @relation(fields: [companyId], references: [companyId])
  isSafe       Boolean
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("riskusers")
}

model DeletedEmployee {
  id           String   @id @default(cuid())
  employeeId   String
  employeeName String
  companyId    String
  addedAt      DateTime @default(now())

  @@map("deleted_employees")
}

model ActualTimeOfCompany {
  actualTimeId     String   @id @default(cuid())
  actualLoginTime  String
  actualLogoutTime String
  companyId        String
  company          Company  @relation(fields: [companyId], references: [companyId])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("actualtimeofcompany")
}

model Attendance {
  actualDate         String
  employeeLoginTime  DateTime
  employeeLogoutTime DateTime?
  lateClockIn        String?
  earlyClockOut      String?
  breakIn DateTime?
  breakOut DateTime?
  breakInMinutes String?
  overTime           String?
  employeeId         String
  departmentId       String
  teamId             String
  companyId          String
  employee           Employee   @relation(fields: [employeeId], references: [employeeId])
  department         Department @relation(fields: [departmentId], references: [departmentId])
  company            Company    @relation(fields: [companyId], references: [companyId])
  team               Team       @relation(fields: [teamId], references: [teamId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([employeeId, actualDate])
  @@map("attendances")
}

enum leaveStatus {
  PENDING
  APPROVE
  DECLINED
}

enum leaveType {
  CASUALLEAVE
  SICKLEAVE
}

model Leave {
  leaveId      String      @id @default(cuid())
  employeeId   String
  departmentId String?
  teamId       String?
  companyId    String
  leaveType    leaveType   @default(CASUALLEAVE)
  leaveStatus  leaveStatus @default(PENDING)
  reason       String
  noOfDays     String
  leaveSession String
  leaveFrom    DateTime
  leaveTo      DateTime
  employee     Employee    @relation(fields: [employeeId], references: [employeeId])
  department   Department? @relation(fields: [departmentId], references: [departmentId])
  company      Company     @relation(fields: [companyId], references: [companyId])
  team         Team?       @relation(fields: [teamId], references: [teamId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leaves")
}

enum HolidayType {
  PUBLIC
  PRIVATE
  OFFICIAL
}

model Holiday {
  holidayId      String      @id @default(cuid())
  departmentId   String?
  teamId         String?
  companyId      String?
  department     Department? @relation(fields: [departmentId], references: [departmentId])
  company        Company?    @relation(fields: [companyId], references: [companyId])
  team           Team?       @relation(fields: [teamId], references: [teamId])
  fromDate       DateTime
  toDate         DateTime
  holidayTitle   String
  holidayType    HolidayType @default(PUBLIC)
  holidaySession String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("holidays")
}

enum AppType {
  PRODUCTIVE
  UNPRODUCTIVE
  NEUTRAL
}

model App {
  appId           String      @id @default(cuid())
  appName         String
  appLogo         String?
  day             String?
  appUsedDuration String?
  appType         AppType     
  departmentId    String?
  teamId          String?
  companyId       String
  employeeId      String?
  department      Department? @relation(fields: [departmentId], references: [departmentId])
  company         Company     @relation(fields: [companyId], references: [companyId])
  team            Team?       @relation(fields: [teamId], references: [teamId])
  employee        Employee?    @relation(fields: [employeeId], references: [employeeId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("apps")
}


model AppReview {
  appName String @unique
  appLogo String?
  appReview AppType @default(NEUTRAL)
  companyId String
  company         Company     @relation(fields: [companyId], references: [companyId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@id([appName, companyId])
   @@map("appreviews")
}


model Notification {
  notificationId     String    @id @default(cuid())
  message            String
  senderEmployeeId   String?
  senderCompanyId    String?
  receiverCompanyId  String?
  receiverEmployeeId String?
  links              String?
  isRead             Boolean   @default(false)
  senderEmployee     Employee? @relation("SentNotificationsEmployee", fields: [senderEmployeeId], references: [employeeId])
  receiverEmployee   Employee? @relation("ReceivedNotificationsEmployee", fields: [receiverEmployeeId], references: [employeeId])
  senderCompany      Company?  @relation("SentNotificationsCompany", fields: [senderCompanyId], references: [companyId])
  receiverCompany    Company?  @relation("ReceivedNotificationsCompany", fields: [receiverCompanyId], references: [companyId])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("notifications")
}


// model Conversation {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   participantIds String[]
//   participants   Employee[]

//   messageIds String[]
//   messages   Message[]
// }

// model Message {
//   id String @id @default(cuid())

//   conversationId String
//   conversation   Conversation @relation(fields: [conversationId], references: [id])

//   senderId String
//   sender   Employee   @relation(fields: [senderId], references: [employeeId])

//   body      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model MessageMedia {
  id                          String    @id @default(cuid())
  name                        String
  filePath                    String
  mimeType                    String
  companyAndEmployeeMessageId  String?
  companyAndEmployeeMessage    CompanyAndEmployeeMessage? @relation("CompanyAndEmployeeMessageToMedia", fields: [companyAndEmployeeMessageId], references: [id], onDelete: Cascade)

  messageId                   String?
  message                     Message?  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Room {
  id          String    @id @default(cuid())
  participants Employee[] @relation("RoomParticipants")
  messages    Message[]  @relation("RoomMessages")
}
model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  senderId   String
  
  sender     Employee @relation("SentMessages", fields: [senderId], references: [employeeId], onDelete:Cascade)
  receiverId String
  receiver   Employee @relation("ReceivedMessages", fields: [receiverId], references: [employeeId], onDelete:Cascade)
  roomId     String
  room       Room     @relation("RoomMessages", fields: [roomId], references: [id] ,onDelete:Cascade)
  media  MessageMedia[]
}

model Employee {
  employeeId            String           @id @default(cuid())
  employeeName          String
  email                 String           @unique
  phoneNumber           String           @unique
  password              String
  employeeAddress       String
  departmentId          String?
  department            Department?      @relation(fields: [departmentId], references: [departmentId], onDelete:Cascade)
  position              String
  isActive              Boolean
  teamId                String?
  team                  Team?            @relation(fields: [teamId], references: [teamId] ,onDelete:Cascade)
  companyId             String
  company               Company          @relation(fields: [companyId], references: [companyId] ,onDelete:Cascade)
  screenshot            Screenshot[]
  timeLapseVideo        TimeLapseVideo[]
  riskUser              RiskUser[]
  attendance            Attendance[]
  leave                 Leave[]
  app                   App[]
  notificationsSent     Notification[]   @relation("SentNotificationsEmployee")
  notificationsReceived Notification[]   @relation("ReceivedNotificationsEmployee")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  // conversationsIds String[]
  // conversations Conversation[]
    sentMessages          Message[]        @relation("SentMessages")
  receivedMessages      Message[]        @relation("ReceivedMessages")
  rooms                 Room[]           @relation("RoomParticipants")

  employeeSentMessage   CompanyAndEmployeeMessage[] @relation("SentEmployeeMessages")
    employeeReceivedMessage CompanyAndEmployeeMessage[] @relation("ReceivedEmployeeMessages")

  roomParticipants       RoomParticipant[]      @relation("EmployeeRoomParticipants")

  @@map("employees")

}

//tempEmployee
model EmployeeTemp {
  employeeId            String           @id @default(cuid())
  employeeName          String
  email                 String           @unique
  phoneNumber           String           @unique
  password              String
  employeeAddress       String
  position              String
  isActive              Boolean

  companyId             String

  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt


}





















model CompanyAndEmployeeMessage {
  id                  String    @id @default(cuid())
  content             String
  read                Boolean   @default(false)
  employeeSenderId    String?
  employeeSender      Employee? @relation("SentEmployeeMessages", fields: [employeeSenderId], references: [employeeId], onDelete: Cascade)
  employeeReceiverId  String?
  employeeReceiver    Employee? @relation("ReceivedEmployeeMessages", fields: [employeeReceiverId], references: [employeeId], onDelete: Cascade)
  companySenderId     String?
  companySender       Company?  @relation("SentCompanyMessages", fields: [companySenderId], references: [companyId], onDelete: Cascade)
  companyReceiverId   String?
  companyReceiver     Company?  @relation("ReceivedCompanyMessages", fields: [companyReceiverId], references: [companyId], onDelete: Cascade)
  roomId              String?
  room                CompanyAndEmployeeRoom? @relation("RoomMessages", fields: [roomId], references: [id], onDelete: Cascade)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  media               MessageMedia[] @relation("CompanyAndEmployeeMessageToMedia")  // Fix: Use the same relation name
}
model CompanyAndEmployeeRoom {
  id            String               @id @default(cuid())
  name          String?
  participants  RoomParticipant[]
  messages      CompanyAndEmployeeMessage[] @relation("RoomMessages")
   @@map("CompanyAndEmployeeRoom")
}

model RoomParticipant {
  id            String     @id @default(cuid())
  roomId        String
  room          CompanyAndEmployeeRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  employeeId    String?
  employee      Employee?  @relation("EmployeeRoomParticipants", fields: [employeeId], references: [employeeId], onDelete: Cascade)
  companyId     String?
  company       Company?   @relation("CompanyRoomParticipants",fields: [companyId], references: [companyId], onDelete: Cascade)
  @@unique([roomId, employeeId, companyId])
}
// subscriptions table start:
model SubscriptionPlans{
  id  String @id @default(cuid())
  subscriptionName String
  price Int
  billingCycle String
  feature Json
  userSubscription  UserSubscription[]
}
model UserSubscription {
  id                 String           @id @default(cuid())
  companyId          String
  company            Company          @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  subscriptionPlansId String
  subscription       SubscriptionPlans @relation(fields: [subscriptionPlansId], references: [id], onDelete: Cascade)
  startDate          DateTime
  endDate            DateTime
  status             StatusType
  autoRenew          Boolean
  payments           Payments[]       // This reflects a one-to-many relationship with Payments
  invoice            Invoice[]
}
enum StatusType{
  ACTIVE
  EXPIRED
  CANCELLED
}
model Payments {
  id                String           @id @default(cuid())
  companyId         String
  company           Company          @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  userSubscriptionId String
  userSubscription  UserSubscription @relation(fields: [userSubscriptionId], references: [id], onDelete: Cascade)
  transactionId     String
  amount            Int
  paymentDate       DateTime
  paymentMethod     String
  status            PaymentStatusType
}

model Invoice{
  id String @id @default(cuid())
  companyId  String
  company Company @relation(fields:[companyId],references: [companyId],onDelete: Cascade)
  userSubscriptionId String
  userSubscription  UserSubscription @relation(fields:[userSubscriptionId],references: [id],onDelete: Cascade)
   amount Int
   issueDate  DateTime
   dueDate DateTime
   status InvoiceStatus
}
enum InvoiceStatus{
  PAID
  UNPAID
}
enum PaymentStatusType{
  SUCCESS
  FAILED
  PENDING
}

model Company {
  companyId             String                @id @default(cuid())
  companyEmail          String                @unique
  companyName           String
  companyPhoneNumber    String?                @unique
  document              String?
  location              String?
  password              String
  isApproved            Boolean               @default(false)
  isVerified            Boolean               @default(false)
  noOfDepartments       Int?                  @default(0)
  noOfEmployees         Int?                  @default(0)
  noOfTeams             Int?                  @default(0)
  resetToken            String?
  resetTokenExperiation String?
  departments           Department[]
  teams                 Team[]
  employee              Employee[]
  screenshot            Screenshot[]
  timeLapseVideo        TimeLapseVideo[]
  riskUser              RiskUser[]
  attendance            Attendance[]
  leave                 Leave[]
  holiday               Holiday[]
  app                   App[]
  actualTimeOfCompany   ActualTimeOfCompany[]
  appReview AppReview[]
  notificationsSent     Notification[]        @relation("SentNotificationsCompany")
  notificationsReceived Notification[]        @relation("ReceivedNotificationsCompany")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

 
  sentMessages          CompanyAndEmployeeMessage[] @relation("SentCompanyMessages")
  receivedMessages      CompanyAndEmployeeMessage[] @relation("ReceivedCompanyMessages")
  roomParticipants       RoomParticipant[]      @relation("CompanyRoomParticipants")
  userSubscription        UserSubscription[]
  payments                Payments[]
  invoice                   Invoice[]
  keyword                   Keyword[]  
  freeTrail               FreeTrail?   
  totalScreenShots        Int     @default(0)
  dailyScreenshotCount    Int     @default(0)
  lastScreenshotReset     DateTime?       
 @@map("companies")  
}

model Keyword{
    KeywordId             String                @id @default(cuid())
  companyId String 
  company Company @relation(fields: [companyId],references: [companyId])
  keyword String
}
model FreeTrail{
    freeTrailId             String                @id @default(cuid())
    companyId               String @unique
    company   Company @relation(fields:[companyId],references: [companyId])   
    startDate               DateTime
    endDate                 DateTime
    isExpired               Boolean
  
}